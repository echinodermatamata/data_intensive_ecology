install.packages("devtools")
install.packages("neonUtilities")
install.packages("raster")
options(stringsAsFactors=F)
# run once to get the package, and re-run if you need to get updates
install.packages("sp")  # work with spatial data
install.packages("rgdal")  # work with spatial data
install.packages("maptools")  # work with spatial objects
install.packages("broom")  # tidy up data
install.packages("ggplot2")  # plotting
install.packages("neonUtilities")  # work with NEON data
install.packages("devtools")  # to use the install_github() function
devtools::install_github("NEONScience/NEON-geolocation/geoNEON")  # work with NEON spatial data
# run every time you start a script
library(sp)
library(rgdal)
library(maptools)
library(broom)
library(ggplot2)
library(neonUtilities)
library(geoNEON)
install.packages("sp")  # work with spatial data
install.packages("rgdal")  # work with spatial data
install.packages("maptools")  # work with spatial objects
install.packages("broom")  # tidy up data
install.packages("ggplot2")  # plotting
install.packages("neonUtilities")  # work with NEON data
install.packages("devtools")  # to use the install_github() function
devtools::install_github("NEONScience/NEON-geolocation/geoNEON")  # work with NEON spatial data
library(sp)
library(rgdal)
library(maptools)
library(broom)
library(ggplot2)
library(neonUtilities)
library(geoNEON)
options(stringsAsFactors=F)
tidyverse: install.packages("tidyverse")
neonUtilities: install.packages("neonUtilities")
vegan: install.packages("vegan")
vegetarian: install.packages("vegetarian")
install.packages("tidyverse")
install.packages("neonUtilities")
install.packages("neonUtilities")
install.packages("vegan")
install.packages("vegetarian")
rm(list = ls()) # OPTIONAL - clear out your environment
gc()
library(tidyverse)
library(neonUtilities)
my_dpid <- 'DP1.20120.001'
# list of sites
my_site_list <- c('ARIK', 'POSE', 'MAYF')
# get all tables for these sites from the API -- takes < 1 minute
all_tabs_inv <- neonUtilities::loadByProduct(
dpID = my_dpid,
site = my_site_list,
# list of sites
my_site_list <- c('ARIK', 'POSE', 'MAYF')
# get all tables for these sites from the API -- takes < 1 minute
all_tabs_inv <- neonUtilities::loadByProduct(
dpID = my_dpid,
site = my_site_list,
#token = NEON_TOKEN, #Uncomment to use your token
check.size = F)
# list of sites
my_site_list <- c('ARIK', 'POSE', 'MAYF')
# get all tables for these sites from the API -- takes < 1 minute
all_tabs_inv <- neonUtilities::loadByProduct(
dpID = my_dpid,
site = my_site_list,
#token = NEON_TOKEN, #Uncomment to use your token
check.size = F)
# what tables do you get with macroinvertebrate
# data product
names(all_tabs_inv)
# extract items from list and put in R env.
all_tabs_inv %>% list2env(.GlobalEnv)
# readme has the same informaiton as what you
# will find on the landing page on the data portal
# The variables file describes each field in
# the returned data tables
View(variables_20120)
# The validation file provides the rules that
# constrain data upon ingest into the NEON database:
View(validation_20120)
# the categoricalCodes file provides controlled
# lists used in the data
View(categoricalCodes_20120)
# extract year from date, add it as a new column
inv_fieldData <- inv_fieldData %>%
mutate(
year = collectDate %>%
lubridate::as_date() %>%
lubridate::year())
# extract location data into a separate table
table_location <- inv_fieldData %>%
# keep only the columns listed below
select(siteID,
domainID,
namedLocation,
decimalLatitude,
decimalLongitude,
elevation) %>%
# keep rows with unique combinations of values,
# i.e., no duplicate records
distinct()
# create a taxon table, which describes each
# taxonID that appears in the data set
# start with inv_taxonomyProcessed
table_taxon <- inv_taxonomyProcessed %>%
# keep only the coluns listed below
select(acceptedTaxonID, taxonRank, scientificName,
order, family, genus,
identificationQualifier,
identificationReferences) %>%
# remove rows with duplicate information
distinct()
View(table_taxon)
View(table_location)
View(table_taxon)
# Make the observation table.
# start with inv_taxonomyProcessed
table_observation <- inv_taxonomyProcessed %>%
# select a subset of columns from
# inv_taxonomyProcessed
select(uid,
sampleID,
domainID,
siteID,
namedLocation,
collectDate,
subsamplePercent,
individualCount,
estimatedTotalCount,
acceptedTaxonID,
order, family, genus,
scientificName,
taxonRank) %>%
# Join the columns selected above with two
# columns from inv_fieldData (the two columns
# are sampleID and benthicArea)
left_join(inv_fieldData %>%
select(sampleID, eventID, year,
habitatType, samplerType,
benthicArea)) %>%
# Make the observation table.
# start with inv_taxonomyProcessed
table_observation <- inv_taxonomyProcessed %>%
# select a subset of columns from
# inv_taxonomyProcessed
select(uid,
sampleID,
domainID,
siteID,
namedLocation,
collectDate,
subsamplePercent,
individualCount,
estimatedTotalCount,
acceptedTaxonID,
order, family, genus,
scientificName,
taxonRank) %>%
# Join the columns selected above with two
# columns from inv_fieldData (the two columns
# are sampleID and benthicArea)
left_join(inv_fieldData %>%
select(sampleID, eventID, year,
habitatType, samplerType,
benthicArea)) %>%
# some new columns called 'variable_name',
# 'value', and 'unit', and assign values for
# all rows in the table.
# variable_name and unit are both assigned the
# same text strint for all rows.
mutate(inv_dens = estimatedTotalCount / benthicArea,
inv_dens_unit = 'count per square meter')
# extract sample info
table_sample_info <- table_observation %>%
select(sampleID, domainID, siteID, namedLocation,
collectDate, eventID, year,
habitatType, samplerType, benthicArea,
inv_dens_unit) %>%
distinct()
# remove singletons and doubletons
# create an occurrence summary table
taxa_occurrence_summary <- table_observation %>%
select(sampleID, acceptedTaxonID) %>%
distinct() %>%
group_by(acceptedTaxonID) %>%
summarize(occurrences = n())
# filter out taxa that are only observed 1 or 2 times
taxa_list_cleaned <- taxa_occurrence_summary %>%
filter(occurrences > 2)
# filter observation table based on taxon list above
table_observation_cleaned <- table_observation %>%
filter(acceptedTaxonID %in%
taxa_list_cleaned$acceptedTaxonID,
!sampleID %in% c("MAYF.20190729.CORE.1",
"POSE.20160718.HESS.1"))
#this is an outlier sampleID
# filter observation table based on taxon list above
table_observation_cleaned <- table_observation %>%
filter(acceptedTaxonID %in%
taxa_list_cleaned$acceptedTaxonID,
!sampleID %in% c("MAYF.20190729.CORE.1",
"POSE.20160718.HESS.1"))
# Make the observation table.
# start with inv_taxonomyProcessed
table_observation <- inv_taxonomyProcessed %>%
# select a subset of columns from
# inv_taxonomyProcessed
select(uid,
sampleID,
domainID,
siteID,
namedLocation,
collectDate,
subsamplePercent,
individualCount,
estimatedTotalCount,
acceptedTaxonID,
order, family, genus,
scientificName,
taxonRank) %>%
# Join the columns selected above with two
# columns from inv_fieldData (the two columns
# are sampleID and benthicArea)
left_join(inv_fieldData %>%
select(sampleID, eventID, year,
habitatType, samplerType,
benthicArea)) %>%
# some new columns called 'variable_name',
# 'value', and 'unit', and assign values for
# all rows in the table.
# variable_name and unit are both assigned the
# same text strint for all rows.
mutate(inv_dens = estimatedTotalCount / benthicArea,
inv_dens_unit = 'count per square meter')
# Make the observation table.
# start with inv_taxonomyProcessed
table_observation <- inv_taxonomyProcessed %>%
# select a subset of columns from
# inv_taxonomyProcessed
select(uid,
sampleID,
domainID,
siteID,
namedLocation,
collectDate,
subsamplePercent,
individualCount,
estimatedTotalCount,
acceptedTaxonID,
order, family, genus,
scientificName,
taxonRank) %>%
# Join the columns selected above with two
# columns from inv_fieldData (the two columns
# are sampleID and benthicArea)
left_join(inv_fieldData %>%
select(sampleID, eventID, year,
habitatType, samplerType,
benthicArea)) %>%
# some new columns called 'variable_name',
# 'value', and 'unit', and assign values for
# all rows in the table.
# variable_name and unit are both assigned the
# same text strint for all rows.
mutate(inv_dens = estimatedTotalCount / benthicArea,
inv_dens_unit = 'count per square meter')
# remove singletons and doubletons
# create an occurrence summary table
taxa_occurrence_summary <- table_observation %>%
select(sampleID, acceptedTaxonID) %>%
distinct() %>%
group_by(acceptedTaxonID) %>%
summarize(occurrences = n())
# filter out taxa that are only observed 1 or 2 times
taxa_list_cleaned <- taxa_occurrence_summary %>%
filter(occurrences > 2)
# filter observation table based on taxon list above
table_observation_cleaned <- table_observation %>%
filter(acceptedTaxonID %in%
taxa_list_cleaned$acceptedTaxonID,
!sampleID %in% c("MAYF.20190729.CORE.1",
"POSE.20160718.HESS.1"))
View(table_observation)
# some summary data
sampling_effort_summary <- table_sample_info %>%
# group by siteID, year
group_by(siteID, year, samplerType) %>%
# count samples and habitat types within each event
summarise(
event_count = eventID %>% unique() %>% length(),
sample_count = sampleID %>% unique() %>% length(),
habitat_count = habitatType %>%
unique() %>% length())
# extract sample info
table_sample_info <- table_observation %>%
select(sampleID, domainID, siteID, namedLocation,
collectDate, eventID, year,
habitatType, samplerType, benthicArea,
inv_dens_unit) %>%
distinct()
View(sampling_effort_summary)
# some summary data
sampling_effort_summary <- table_sample_info %>%
# group by siteID, year
group_by(siteID, year, samplerType) %>%
# count samples and habitat types within each event
summarise(
event_count = eventID %>% unique() %>% length(),
sample_count = sampleID %>% unique() %>% length(),
habitat_count = habitatType %>%
unique() %>% length())
# some summary data
sampling_effort_summary <- table_sample_info %>%
# group by siteID, year
group_by(siteID, year, samplerType) %>%
# count samples and habitat types within each event
summarise(
event_count = eventID %>% unique() %>% length(),
sample_count = sampleID %>% unique() %>% length(),
habitat_count = habitatType %>%
unique() %>% length())
# some summary data
sampling_effort_summary <- table_sample_info %>%
# group by siteID, year
group_by(siteID, year, samplerType) %>%
# count samples and habitat types within each event
summarise(
event_count = eventID %>% unique() %>% length(),
sample_count = sampleID %>% unique() %>% length(),
habitat_count = habitatType %>%
unique() %>% length())
View(sampling_effort_summary)
View(sampling_effort_summary)
# no. taxa by rank by site
table_observation_cleaned %>%
group_by(domainID, siteID, taxonRank) %>%
summarize(
n_taxa = acceptedTaxonID %>%
unique() %>% length()) %>%
ggplot(aes(n_taxa, taxonRank)) +
facet_wrap(~ domainID + siteID) +
geom_col()
## ----long-data-2,  fig.cap= "Bar graph of the occurence of each taxonomic order at the D02:POSE, D08:MAYF, and D10:ARIK sites. Occurence data at each site is depicted as stacked bars for each order, where a red bar represents D10:ARIK, a green bar represents D08:MAYF, and a blue bar represents the D02:POSE site. The data has also been reordered to show the greatest to least occuring taxonomic order from left to right."----
# library(scales)
# sum densities by order for each sampleID
table_observation_by_order <-
table_observation_cleaned %>%
filter(!is.na(order)) %>%
group_by(domainID, siteID, year,
eventID, sampleID, habitatType, order) %>%
summarize(order_dens = sum(inv_dens, na.rm = TRUE))
# rank occurrence by order
table_observation_by_order %>% head()
# stacked rank occurrence plot
table_observation_by_order %>%
group_by(order, siteID) %>%
summarize(
occurrence = (order_dens > 0) %>% sum()) %>%
ggplot(aes(
x = reorder(order, -occurrence),
y = occurrence,
color = siteID,
fill = siteID)) +
geom_col() +
theme(axis.text.x =
element_text(angle = 45, hjust = 1))
## ----long-data-3, fig.cap= "Box plots of the log density of each taxonomic order per site. This graph consists of three box plots, organized vertically in one column, that correspond to log density data for each site. This is achieved through the use of the Facet_grid function in the ggplot call."----
# faceted densities plot
table_observation_by_order %>%
ggplot(aes(
x = reorder(order, -order_dens),
y = log10(order_dens),
color = siteID,
fill = siteID)) +
geom_boxplot(alpha = .5) +
facet_grid(siteID ~ .) +
theme(axis.text.x =
element_text(angle = 45, hjust = 1))
# select only site by species density info and remove duplicate records
table_sample_by_taxon_density_long <- table_observation_cleaned %>%
select(sampleID, acceptedTaxonID, inv_dens) %>%
distinct() %>%
filter(!is.na(inv_dens))
View(table_sample_info)
View(table_sample_by_taxon_density_long)
# pivot to wide format, sum multiple counts per sampleID
table_sample_by_taxon_density_wide <- table_sample_by_taxon_density_long %>%
tidyr::pivot_wider(id_cols = sampleID,
names_from = acceptedTaxonID,
values_from = inv_dens,
values_fill = list(inv_dens = 0),
values_fn = list(inv_dens = sum)) %>%
column_to_rownames(var = "sampleID")
# checl col and row sums
colSums(table_sample_by_taxon_density_wide) %>% min()
rowSums(table_sample_by_taxon_density_wide) %>% min()
table_sample_by_taxon_density_wide %>%
vegetarian::d(lev = 'alpha', q = 0)
View(table_sample_by_taxon_density_long)
View(table_sample_by_taxon_density_wide)
# even distribution, order q = 0 diversity = 10
vegetarian::d(
data.frame(spp.a = 10, spp.b = 10, spp.c = 10,
spp.d = 10, spp.e = 10, spp.f = 10,
spp.g = 10, spp.h = 10, spp.i = 10,
spp.j = 10),
q = 0,
lev = "alpha")
rm(list = ls())
gc()
library(tidyverse)
library(neonUtilities)
install.packages("devtools")
install.packages("neonUtilities")
install.packages("raster")
devtools::install_github("NEONScience/NEON-geolocation/geoNEON")
install.packages("neonUtilities")
install.packages("neonUtilities")
# load packages
library(neonUtilities)
library(geoNEON)
library(raster)
# Set global option to NOT convert all character variables to factors
options(stringsAsFactors=F)
# Modify the file path to match the path to your zip file
stackByTable("~/Downloads/")
# Modify the file path to match the path to your zip file
stackByTable("~/Downloads/NEON_count-landbird (1).zip")
stackByTable("~/Downloads/NEON_pathogens-mosquito.zip")
stackByTable("~/Downloads/NEON_count-mosquitoes.zip")
stackByTable("~/Downloads/NEON_obs-phenology-plant.zip")
stackByTable("~/Downloads/NEON_presence-cover-plant.zip")
stackByTable("~/Downloads/NEON_count-small-mammals.zip")
stackByTable("~/Downloads/NEON_comm-microbe-soil.zip")
stackByTable("~/Downloads/NEON_seq-metagenomic-microbe-soil.zip")
stackByTable("~/Downloads/NEON_struct-woody-plant.zip")
stackByTable("~/Downloads/NEON_count-beetles.zip")
library(raster)
library(geoNEON)
# load packages
library(neonUtilities)
install.packages("devtools")
install.packages("neonUtilities")
install.packages("raster")
devtools::install_github("NEONScience/NEON-geolocation/geoNEON")
