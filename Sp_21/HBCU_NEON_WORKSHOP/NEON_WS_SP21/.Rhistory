# all rows in the table.
# variable_name and unit are both assigned the
# same text strint for all rows.
mutate(inv_dens = estimatedTotalCount / benthicArea,
inv_dens_unit = 'count per square meter')
# Make the observation table.
# start with inv_taxonomyProcessed
table_observation <- inv_taxonomyProcessed %>%
# select a subset of columns from
# inv_taxonomyProcessed
select(uid,
sampleID,
domainID,
siteID,
namedLocation,
collectDate,
subsamplePercent,
individualCount,
estimatedTotalCount,
acceptedTaxonID,
order, family, genus,
scientificName,
taxonRank) %>%
# Join the columns selected above with two
# columns from inv_fieldData (the two columns
# are sampleID and benthicArea)
left_join(inv_fieldData %>%
select(sampleID, eventID, year,
habitatType, samplerType,
benthicArea)) %>%
# some new columns called 'variable_name',
# 'value', and 'unit', and assign values for
# all rows in the table.
# variable_name and unit are both assigned the
# same text strint for all rows.
mutate(inv_dens = estimatedTotalCount / benthicArea,
inv_dens_unit = 'count per square meter')
# remove singletons and doubletons
# create an occurrence summary table
taxa_occurrence_summary <- table_observation %>%
select(sampleID, acceptedTaxonID) %>%
distinct() %>%
group_by(acceptedTaxonID) %>%
summarize(occurrences = n())
# filter out taxa that are only observed 1 or 2 times
taxa_list_cleaned <- taxa_occurrence_summary %>%
filter(occurrences > 2)
# filter observation table based on taxon list above
table_observation_cleaned <- table_observation %>%
filter(acceptedTaxonID %in%
taxa_list_cleaned$acceptedTaxonID,
!sampleID %in% c("MAYF.20190729.CORE.1",
"POSE.20160718.HESS.1"))
View(table_observation)
# some summary data
sampling_effort_summary <- table_sample_info %>%
# group by siteID, year
group_by(siteID, year, samplerType) %>%
# count samples and habitat types within each event
summarise(
event_count = eventID %>% unique() %>% length(),
sample_count = sampleID %>% unique() %>% length(),
habitat_count = habitatType %>%
unique() %>% length())
# extract sample info
table_sample_info <- table_observation %>%
select(sampleID, domainID, siteID, namedLocation,
collectDate, eventID, year,
habitatType, samplerType, benthicArea,
inv_dens_unit) %>%
distinct()
View(sampling_effort_summary)
# some summary data
sampling_effort_summary <- table_sample_info %>%
# group by siteID, year
group_by(siteID, year, samplerType) %>%
# count samples and habitat types within each event
summarise(
event_count = eventID %>% unique() %>% length(),
sample_count = sampleID %>% unique() %>% length(),
habitat_count = habitatType %>%
unique() %>% length())
# some summary data
sampling_effort_summary <- table_sample_info %>%
# group by siteID, year
group_by(siteID, year, samplerType) %>%
# count samples and habitat types within each event
summarise(
event_count = eventID %>% unique() %>% length(),
sample_count = sampleID %>% unique() %>% length(),
habitat_count = habitatType %>%
unique() %>% length())
# some summary data
sampling_effort_summary <- table_sample_info %>%
# group by siteID, year
group_by(siteID, year, samplerType) %>%
# count samples and habitat types within each event
summarise(
event_count = eventID %>% unique() %>% length(),
sample_count = sampleID %>% unique() %>% length(),
habitat_count = habitatType %>%
unique() %>% length())
View(sampling_effort_summary)
View(sampling_effort_summary)
# no. taxa by rank by site
table_observation_cleaned %>%
group_by(domainID, siteID, taxonRank) %>%
summarize(
n_taxa = acceptedTaxonID %>%
unique() %>% length()) %>%
ggplot(aes(n_taxa, taxonRank)) +
facet_wrap(~ domainID + siteID) +
geom_col()
## ----long-data-2,  fig.cap= "Bar graph of the occurence of each taxonomic order at the D02:POSE, D08:MAYF, and D10:ARIK sites. Occurence data at each site is depicted as stacked bars for each order, where a red bar represents D10:ARIK, a green bar represents D08:MAYF, and a blue bar represents the D02:POSE site. The data has also been reordered to show the greatest to least occuring taxonomic order from left to right."----
# library(scales)
# sum densities by order for each sampleID
table_observation_by_order <-
table_observation_cleaned %>%
filter(!is.na(order)) %>%
group_by(domainID, siteID, year,
eventID, sampleID, habitatType, order) %>%
summarize(order_dens = sum(inv_dens, na.rm = TRUE))
# rank occurrence by order
table_observation_by_order %>% head()
# stacked rank occurrence plot
table_observation_by_order %>%
group_by(order, siteID) %>%
summarize(
occurrence = (order_dens > 0) %>% sum()) %>%
ggplot(aes(
x = reorder(order, -occurrence),
y = occurrence,
color = siteID,
fill = siteID)) +
geom_col() +
theme(axis.text.x =
element_text(angle = 45, hjust = 1))
## ----long-data-3, fig.cap= "Box plots of the log density of each taxonomic order per site. This graph consists of three box plots, organized vertically in one column, that correspond to log density data for each site. This is achieved through the use of the Facet_grid function in the ggplot call."----
# faceted densities plot
table_observation_by_order %>%
ggplot(aes(
x = reorder(order, -order_dens),
y = log10(order_dens),
color = siteID,
fill = siteID)) +
geom_boxplot(alpha = .5) +
facet_grid(siteID ~ .) +
theme(axis.text.x =
element_text(angle = 45, hjust = 1))
# select only site by species density info and remove duplicate records
table_sample_by_taxon_density_long <- table_observation_cleaned %>%
select(sampleID, acceptedTaxonID, inv_dens) %>%
distinct() %>%
filter(!is.na(inv_dens))
View(table_sample_info)
View(table_sample_by_taxon_density_long)
# pivot to wide format, sum multiple counts per sampleID
table_sample_by_taxon_density_wide <- table_sample_by_taxon_density_long %>%
tidyr::pivot_wider(id_cols = sampleID,
names_from = acceptedTaxonID,
values_from = inv_dens,
values_fill = list(inv_dens = 0),
values_fn = list(inv_dens = sum)) %>%
column_to_rownames(var = "sampleID")
# checl col and row sums
colSums(table_sample_by_taxon_density_wide) %>% min()
rowSums(table_sample_by_taxon_density_wide) %>% min()
table_sample_by_taxon_density_wide %>%
vegetarian::d(lev = 'alpha', q = 0)
View(table_sample_by_taxon_density_long)
View(table_sample_by_taxon_density_wide)
# even distribution, order q = 0 diversity = 10
vegetarian::d(
data.frame(spp.a = 10, spp.b = 10, spp.c = 10,
spp.d = 10, spp.e = 10, spp.f = 10,
spp.g = 10, spp.h = 10, spp.i = 10,
spp.j = 10),
q = 0,
lev = "alpha")
install.packages("ggplot2")
install.packages("dplyr")
library(neonUtilities)
library(dplyr)
library(ggplot2)
options(stringsAsFactors=F)
wd <- "~/Downloads/"
ind <- phe$phe_perindividual  #individual information
phe <- "~/Downloads/NEON_obs-phenology-plant/"
ind <- phe$phe_perindividual  #individual information
status <- phe$phe_statusintensity
phe <- "~/Downloads/NEON_obs-phenology-plant/stackedFiles/"
ind <- phe$phe_perindividual  #individual information
source('~/.active-rstudio-document')
ind <- "~/Downloads/NEON_obs-phenology-plant/stackedFiles/phe_perindividual.csv"  #individual information
status <-"~/Downloads/NEON_obs-phenology-plant/stackedFiles/phe_statusintensity.csv"
names(ind)
phe <- "~/Downloads/NEON_obs-phenology-plant.zip"
ind <- ind <- phe$phe_perindividual
phe <- "~/Downloads/NEON_obs-phenology-plant/stackedFiles/"
ind <-  "~/Downloads/NEON_obs-phenology-plant/stackedFiles/phe_perindividual.csv"
status <- "~/Downloads/NEON_obs-phenology-plant/stackedFiles/phe_statusintensity.csv"
ind <- readTableNEON('~/Downloads/NEON_obs-phenology-plant/stackedFiles/phe_perindividual.csv', '"~/Downloads/NEON_obs-phenology-plant/stackedFiles/variables_10055.csv')
ind <- readTableNEON('~/Downloads/NEON_obs-phenology-plant/stackedFiles/phe_perindividual.csv', '~/Downloads/NEON_obs-phenology-plant/stackedFiles/variables_10055.csv.csv')
ind <- readTableNEON('~/Downloads/NEON_obs-phenology-plant/stackedFiles/phe_perindividual.csv', '~/Downloads/NEON_obs-phenology-plant/stackedFiles/variables_10055.csv')
status <- readTableNEON('~/Downloads/NEON_obs-phenology-plant/stackedFiles/phe_statusintensity.csv', '~/Downloads/NEON_obs-phenology-plant/stackedFiles/variables_10055.csv')
names(ind)
ind_noUID <- select(ind, -(uid))
ind_noD <- distinct(ind_noUID)
nrow(ind_noD)
View(phe$variables_10055)
is.recursive(phe)
library(neonUtilities)
ind_noUID <- select(ind, -(uid))
library(ggplot2)
ind_noUID <- select(ind, -(uid))
dplyr::select
ind_noUID <- select(ind, -(uid))
ind_noUID <- select(ind, !(uid))
ind_noUID <- select(ind !(uid))
ind_noUID <- select(ind,!(uid))
ind_noUID <- select(ind,-uid)
ind_noUID <- select(ind,!(uid))
ind_noUID <- ind %>% select(!(uid))
ind %>% select(!(uid))
dplyr:: ind %>% select(!(uid))
dplyr:: select(!(uid))
dplyr:: select(ind,!(uid))
dplyr:: ind_noUID <- select(ind,!(uid))
str(ind)
dplyr:: ind_noUID <- select(ind,!(uid))
dplyr:: select(ind,!(uid))
ind_noD <- distinct(ind)
nrow(ind_noD)
ind2 <-  "~/Downloads/NEON_obs-phenology-plant/stackedFiles/phe_perindividual.csv"
intersect(names(status), names(ind))
dplyr:: select(status,!(uid))
> status_noD <- distinct(status_noD)
> status_noD <- distinct(status)
> nrow(status_noD)
dplyr:: select(status,!(uid))
> status_noD <- distinct(status)
dplyr:: select(ind,!(uid))
ind_noD <- distinct(ind)
nrow(ind_noD)
dplyr:: select(status,!(uid))
status_noD <- distinct(status)
nrow(status_noD)
intersect(names(status_noD), names(ind_noD))
status_noD <- rename(status_noD, dateStat=date,
editedDateStat=editedDate, measuredByStat=measuredBy,
recordedByStat=recordedBy,
samplingProtocolVersionStat=samplingProtocolVersion,
remarksStat=remarks, dataQFStat=dataQF,
publicationDateStat=publicationDate)
ind_last <- ind_noD %>%
group_by(individualID) %>%
filter(editedDate==max(editedDate))
ind_lastnoD <- ind_last %>%
group_by(editedDate, individualID) %>%
filter(row_number()==1)
phe_ind <- left_join(status_noD, ind_lastnoD)
View(phe_ind)
library(neonUtilities)
library(dplyr)
library(ggplot2)
options(stringsAsFactors=F)
options(stringsAsFactors=F)
wd <- "~/Downloads/NEON_obs-phenology-plant/" # Change this to match your local environment
setwd(wd)
phe <- loadByProduct(dpID = "DP1.10055.001", site=c("DSNY","OSBS","JERC","MLBS"),
startdate = "2013-08", enddate="2020-12",
check.size = F)
ind <- phe$phe_perindividual  #individual information
status <- phe$phe_statusintensity  #status & intensity info
ind_noUID <- select(ind, -(uid))
ind_noUID <- select(ind, !(uid))
dplyr:: ind_noUID <- select(ind, !(uid))
dplyr:: select(ind, !(uid))
ind_noD <- distinct(ind)
dplyr:: select(status, !(uid))
status_noUID <- distinct(status)
intersect(names(status_noD), names(ind_noD))
status_noD <- distinct(status)
ind_noD <- distinct(ind)
intersect(names(status_noD), names(ind_noD))
status_noD <- rename(status_noD, dateStat=date,
editedDateStat=editedDate, measuredByStat=measuredBy,
recordedByStat=recordedBy,
samplingProtocolVersionStat=samplingProtocolVersion,
remarksStat=remarks, dataQFStat=dataQF,
publicationDateStat=publicationDate, releaseStat=release)
ind_last <- ind_noD %>%
group_by(individualID) %>%
filter(editedDate==max(editedDate))
group_by(individualID) %>%
ind_last <- ind_noD %>%
group_by(individualID) %>%
filter(editedDate==max(editedDate))
ind_last <- ind_noD %>%
group_by(individualID) %>%
filter(editedDate==max(editedDate))
ind_last <- ind_noD %>%
group_by(individualID) %>%
filter(editedDate==max(editedDate))
ind_last <- ind_noD %>%
group_by(individualID) %>%
filter(editedDate==max(editedDate))
ind_lastnoD <- ind_last %>%
group_by(editedDate, individualID) %>%
filter(row_number()==1)
ind_lastnoD <- ind_last %>%
group_by(editedDate, individualID) %>%
filter(row_number()==1)
ind_lastnoD <- ind_last %>%
group_by(editedDate, individualID) %>%
filter(row_number()==1)
phe_ind <- left_join(status_noD, ind_lastnoD)
View(phe_ind)
View(status)
View(ind)
View(ind_last)
unique(phe_1st$taxonID)
unique(phe_ind$taxonID)
siteOfInterest <- "MLBS"
phe_1st <- filter(phe_ind, siteID %in% siteOfInterest)
View(phe_1st)
View(ind)
View(ind_noD)
intersect(names(status_noD), names(ind_noD))
phe <- loadByProduct(dpID = "DP1.10055.001", site=c("DSNY","OSBS","JERC","MLB"),
startdate = "2013-08", enddate="2020-12",
check.size = F)
ind <- phe$phe_perindividual  #individual information
status <- phe$phe_statusintensity  #status & intensity info
names(ind)
View(phe$variables_10055)
phe_ind <- left_join(status, ind)
View(phe_ind)
phe_ind2 <- left_join(ind, status)
View(phe_ind2)
View(phe_ind)
phe_ind3 <- right_join(ind, status)
View(phe_ind3)
phe_ind4 <- right_join(status, ind)
View(phe_ind4)
phe_ind5 <- full_join(status, ind)
View(phe_ind5)
library(dbplyr)
phe_ind6 <- left_join(status, ind, by = "individualID")
View(phe_ind6)
View(phe_ind6)
write.csv( phe_ind6 , file="NEONpheno_combined.csv"
write.csv( phe_ind6 , file="NEONpheno_combined.csv"_
write.csv( phe_ind6 , file="NEONpheno_combined.csv")
stackByTable("~/Downloads/NEON_pathogens-tick.zip")
stackByTable("~/Downloads/NEON_pathogens-tick 2/.zip")
stackByTable("~/Downloads/NEON_pathogens-tick 2.zip")
stackByTable("~/Downloads/NEON_pathogens-tick (1).zip")
stackByTable("~/Downloads/NEON_group-abund-microbe-soil.zip")
stackByTable("~/Downloads/NEON_comm-microbe-soil (1).zip")
load("~/Downloads/NEON_obs-phenology-plant/NEONpheno_combined.csv")
load ("~/Downloads/NEON_obs-phenology-plant/NEONpheno_combined.csv")
View(phe_ind6)
write.csv(phe_ind6 , file="NEON_pheno_combined.csv")
load ("~/Desktop/Data_Intensive_Ecology_2021/HBCU_NEON_WORKSHOP/NEON_WS_SP21/NEON_pheno_combined.csv")
write.csv( phe_ind6 , file="NEONpheno_combined.csv")
load ("~/Desktop/Data_Intensive_Ecology_2021/HBCU_NEON_WORKSHOP/NEON_WS_SP21/NEON_pheno_combined.csv")
read("~/Desktop/Data_Intensive_Ecology_2021/HBCU_NEON_WORKSHOP/NEON_WS_SP21/NEON_pheno_combined.csv")
read.csv("~/Desktop/Data_Intensive_Ecology_2021/HBCU_NEON_WORKSHOP/NEON_WS_SP21/NEON_pheno_combined.csv")
pheno <- read.csv("~/Desktop/Data_Intensive_Ecology_2021/HBCU_NEON_WORKSHOP/NEON_WS_SP21/NEON_pheno_combined.csv")
head (pheno)
library(plyr)
library("dplyr")
phenoDSNY <- pheno %>%
filter(siteID.x %in% "DSNY")
View(phenoDSNY)
write.csv(phenoDSNY, file="NEON_pheno_DSNY.csv")
phenoJERC <- pheno %>%
filter(siteID.x %in% "JERC")
View(phenoJERC)
write.csv(phenoJERC, file="NEON_pheno_JERC.csv")
phenoOSBS <- pheno %>%
filter(siteID.x %in% "OSBS")
write.csv(phenoOSBS, file="NEON_pheno_OSBS.csv")
phenoMLBS <- pheno %>%
filter(siteID.x %in% "MLBS")
write.csv(phenoMLBS, file="NEON_pheno_MLBS.csv")
View(phenoOSBS)
count(date.x)
count("date.x")
phenoOSBS <- count ("date.x")
# Simple Bar Plot
counts <- table(phenoOSBS$date.x)
barplot(counts, main="Car Distribution",
xlab="Number of Gears")
table(phenoOSBS$date.x)
dates <- table(phenoOSBS$date.x)
view (dates)
datesMLBS <- table(phenoMLBS$date.x)
table(phenoMLBS$date.x)
phenoMLBS_08_2017_2018_2019 <- phenoMLBS %>%
filter(date.x %in% "2017-08-07","2017-08-22","2017-08-29","2018-08-13","2018-08-20","2018-08-23,"2018-08-27","2018-08-30")
write.csv(phenoMLBS, file="NEON_pheno_MLBS.csv")
phenoMLBS_08_2017_2018_2019 <- phenoMLBS %>%
filter(date.x = "2017-08-07","2017-08-22","2017-08-25","2017-08-29", "2018-08-13","2018-08-20","2018-08-23", "2018-08-27","2018-08-30","2019-08-12","2019-08-15","2019-08-19","2019-08-22","2019-08-26")
phenoMLBS_08_2017_2018_2019 <- phenoMLBS %>%
filter(date.x == "2017-08-07","2017-08-22","2017-08-25","2017-08-29", "2018-08-13","2018-08-20","2018-08-23", "2018-08-27","2018-08-30","2019-08-12","2019-08-15","2019-08-19","2019-08-22","2019-08-26")
phenoMLBS_08_2017_2018_2019 <- phenoMLBS %>%
filter(date.x %in% "2017-08-07","2017-08-22","2017-08-25","2017-08-29", "2018-08-13","2018-08-20","2018-08-23", "2018-08-27","2018-08-30","2019-08-12","2019-08-15","2019-08-19","2019-08-22","2019-08-26")
rlang::last_error()
phenoMLBS_08_2017_2018_2019 <- phenoMLBS %>%
filter(date.x %in% "2017-08-07" & "2017-08-22" & "2017-08-25" & "2017-08-29" & "2018-08-13" & "2018-08-20" & "2018-08-23" & "2018-08-27" & "2018-08-30" & "2019-08-12" & "2019-08-15" & "2019-08-19" & "2019-08-22" & "2019-08-26")
aug <- c ("2017-08-07" , "2017-08-22" , "2017-08-25" , "2017-08-29" , "2018-08-13" , "2018-08-20" , "2018-08-23" , "2018-08-27" , "2018-08-30" , "2019-08-12" , "2019-08-15" , "2019-08-19" , "2019-08-22" , "2019-08-26")
phenoMLBS_08_2017_2018_2019 <- phenoMLBS %>%
filter(date.x == aug )
phenoMLBS_08_2017_2018_2019 <- phenoMLBS %>%
filter(date.x %>% aug )
filt <- filter(phenoMLBS, date.x == aug)
View(filt)
filt <- filter(phenoMLBS, date.x %in% aug)
write.csv(filt, file="NEON_pheno_MLBS_08_only.csv")
View(ind)
View(phe)
setwd("~/Desktop/Data_Intensive_Ecology_2021/")
load(brd_countdata.csv)
load("brd_countdata.csv")
load("brd_countdata.csv")
brd <-import.data ("brd_countdata.csv")
brd <-import.data.csv ("brd_countdata.csv")
brd <-read.csv ("brd_countdata.csv")
view("brd")
brd <-read.csv ("brd_countdata.csv")
view ("brd")
View(brd)
view(brd)
View("brd")
load(dpylr)
library(dbplyr)
library(dplyr)
load(dplyr)
load("brd_countdata.csv")
setwd("~/Desktop/Data_Intensive_Ecology_2021/")
read.csv("brd_countdata.csv", header=True)
read.csv("brd_countdata.csv", header= TRUE)
load(file = "brd_countdata.csv")
load("HBCU_NEON_WORKSHOP/NEON_WS_SP21/NEON_WS_SP21.Rproj")
brd <- read.csv("brd_countdata.csv")
View(brd)
data <- brd
## now you should have an entry called "data" in your global environment
library(descr)
load(descr)
install.packages("descr")
install.packages(Hmisc)
install.packages("Hmisc")
install.packages("descr")
install.packages("Hmisc")
library(descr)
library(Hmisc)
freq(data$siteID)
## The video then goes into how to change the names of the variables in the original data set. This may be something that you want to do. If so use the following function:
label(data$siteID) <- "Site Name"
freq(data$siteID)
freq (data$taxonID)
## add cumulative percent to table
freq(as.ordered(data$siteID))
sub1 <- data[data$siteID == "ABBY"]
sub1 <- data[data$siteID == ABBY]
sub1 <- data[data$siteID %in% "ABBY"]
sub1 <- data[data$siteID %in% ABBY]
sub1 <- data[data$siteID == 'ABBY']
sub1 <- data[which (data$siteID == 'ABBY')]
View(data$siteID)
sub1 <- data[which (data$siteID == 'ABBY'),]
sub1 <- data[data$siteID == 'ABBY',]
freq(data$siteID, data$taxonID)
attach(data)
mytable <- table(data$siteID, data$taxonID)
mytable
attach(data)
mytable <- table(data$siteID, data$taxonID) # the first variable is the rows (in this case data$siteID) and the second is the columns (data$taxonID).
mytable
margin.table(mytable, 1) # A frequencies (summed over B)
margin.table(mytable, 2) # B frequencies (summed over A)
prop.table(mytable) # cell percentages
prop.table(mytable, 1) # row percentages
prop.table(mytable, 2) # column percentages
install.packages("devtools")
install.packages("neonUtilities")
install.packages("raster")
devtools::install_github("NEONScience/NEON-geolocation/geoNEON")
# load packages
library(neonUtilities)
library(geoNEON)
library(raster)
# Set global option to NOT convert all character variables to factors
options(stringsAsFactors=F)
soilchem <- loadByProduct(dpID="DP1.10098.001", site= c "DSNY","JERC","OSBS", "MLBS",
package="expanded", check.size=T)
soilchem <- loadByProduct(dpID="DP1.10098.001", site= "DSNY","JERC","OSBS", "MLBS",
package="expanded", check.size=T)
soilchem <- loadByProduct(dpID="DP1.10098.001", site= c("DSNY","JERC","OSBS", "MLBS"),
package="expanded", check.size=T)
soilchem <- loadByProduct(dpID="DP1.10098.001", site= c("DSNY","JERC","OSBS", "MLBS"),
package="expanded", check.size=T)
names(soilchem)
View(soilchem$sim_eventData)
View(soilchem$sim_eventData)
Viewwd()
View wd()
wd()
setwd("~/Desktop/Data_Intensive_Ecology_2021")
