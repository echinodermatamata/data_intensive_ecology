library(readxl)
GUD_invasive_grass_moonlight <- read_excel("Desktop/GUD invasive grass moonlight.xlsx")
View(GUD_invasive_grass_moonlight)
View(GUD_invasive_grass_moonlight)
acs <- read.csv(url("http://stat511.cwick.co.nz/homeworks/acs_or.csv"))
View(acs)
GUD_invasive_grass_moonlight <- read_xlsx(/Users/jkovacs/desktop/GUD_invasive_grass_moonlight.xlsx)
GUD_invasive_grass_moonlight <- read_xlsx(Users/jkovacs/desktop/GUD_invasive_grass_moonlight.xlsx)
GUD_invasive_grass_moonlight <- read_xlsx(jkovacs/desktop/GUD_invasive_grass_moonlight.xlsx)
GUD_invasive_grass_moonlight <- read_xlsx(Desktop/GUD_invasive_grass_moonlight.xlsx)
GUD_invasive_grass_moonlight <- read_xlsx("Desktop/GUD_invasive_grass_moonlight.xlsx")
GUD_invasive_grass_moonlight <- read_excel(Desktop/GUD_invasive_grass_moonlight.xlsx)
GUD_invasive_grass_moonlight <- read_excel("Desktop/GUD_invasive_grass_moonlight.xlsx")
GUD <- read_excel("Desktop/GUD.xlsx")
View(GUD)
View(acs)
plot(x = s$age_husband , y = s$age_wife, type = 'p')
a <- subset(acs , age_husband > age_wife)
View(GUD)
plot(x = $Habitat , y = $GUD_mean, type = 'p')
plot(x = Habitat , y = GUD_mean, type = 'p')
install.packages("dplyr")
install.packages("vegan")
install.packages("BiodiversityR")
install.packages("dplyr")
install.packages(c("backports", "callr", "cli", "clipr", "covr", "devtools", "dplyr", "DT", "fs", "glue", "htmlwidgets", "jsonlite", "knitr", "MASS", "mgcv", "neonUtilities", "nlme", "openssl", "pbapply", "processx", "ps", "readr", "rlang", "sp", "stringi", "survival", "tibble", "tidyr", "usethis", "vctrs", "withr", "xfun"))
2+2
2+2
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("lubridate")
install.packages("scales")
install.packages("tidyr")
knitr::opts_chunk$set(echo = TRUE)
# load needed packages-- You will need to do this EVERY time you start up RStudio to run this code
library(neonUtilities)
library(dplyr)
library(ggplot2)
options(stringsAsFactors=F) #keep strings as character type not factors
# set working directory to ensure R can find the file we wish to import and where
# we want to save our files. Be sure to move the download into your working directory!
wd <- "~/Desktop/Data_Intensive_Ecology_2021/Phenology_Case_Study/" # Change this to match your local environment
setwd(wd)
##Option 1: You can download the data directly from the NEON site
.
#Read data from data portal
phe <- loadByProduct(dpID = "DP1.10055.001", site=c("BLAN","SCBI","SERC"),
startdate = "2017-01", enddate="2019-12",
check.size = F)
# if you aren't sure you can handle the data file size use check.size = T.
# save dataframes from the downloaded list
ind <- phe$phe_perindividual  #individual information
status <- phe$phe_statusintensity  #status & intensity info
## ----remove-duplicates---------------------------------------------------------------------------------
# drop UID as that will be unique for duplicate records
ind_noUID <- select(ind, -(uid))
status_noUID <- select(status, -(uid))
# remove duplicates
## expect many
ind_noD <- distinct(ind_noUID)
nrow(ind_noD)
status_noD<-distinct(status_noUID)
nrow(status_noD)
## ----same-fieldnames-----------------------------------------------------------------------------------
# where is there an intersection of names
intersect(names(status_noD), names(ind_noD))
## ----rename-column-------------------------------------------------------------------------------------
# in Status table rename like columns
status_noD <- rename(status_noD, dateStat=date,
editedDateStat=editedDate, measuredByStat=measuredBy,
recordedByStat=recordedBy,
samplingProtocolVersionStat=samplingProtocolVersion,
remarksStat=remarks, dataQFStat=dataQF,
publicationDateStat=publicationDate)
# retain only the max of the date for each individualID
ind_last <- ind_noD %>%
group_by(individualID) %>%
filter(editedDate==max(editedDate))
# oh wait, duplicate dates, retain only the most recent editedDate
ind_lastnoD <- ind_last %>%
group_by(editedDate, individualID) %>%
filter(row_number()==1)
# Create a new dataframe "phe_ind" with all the data from status and some from ind_lastnoD
phe_ind <- left_join(status_noD, ind_lastnoD)
# set site of interest
siteOfInterest <- "SCBI"
# use filter to select only the site of Interest
## using %in% allows one to add a vector if you want more than one site.
## could also do it with == instead of %in% but won't work with vectors
phe_1st <- filter(phe_ind, siteID %in% siteOfInterest)
# see which species are present - taxon ID only
unique(phe_1st$taxonID)
# or see which species are present with taxon ID + species name
unique(paste(phe_1st$taxonID, phe_1st$scientificName, sep=' - '))
speciesOfInterest <- "LITU"
#subset to just "LITU"
# here just use == but could also use %in%
phe_1sp <- filter(phe_1st, taxonID==speciesOfInterest)
# check that it worked
unique(phe_1sp$taxonID)
# see which phenophases are present
unique(phe_1sp$phenophaseName)
phenophaseOfInterest <- "Leaves"
#subset to just the phenosphase of interest
phe_1sp <- filter(phe_1sp, phenophaseName %in% phenophaseOfInterest)
# check that it worked
unique(phe_1sp$phenophaseName)
# what plots are present?
unique(phe_1sp$subtypeSpecification)
# filter
phe_1spPrimary <- filter(phe_1sp, subtypeSpecification == 'primary')
# check that it worked
unique(phe_1spPrimary$subtypeSpecification)
# Calculate sample size for later use
sampSize <- phe_1spPrimary %>%
group_by(dateStat) %>%
summarise(numInd= n_distinct(individualID))
## `summarise()` ungrouping output (override with `.groups` argument)
# Total in status by day for distinct individuals
inStat <- phe_1spPrimary%>%
group_by(dateStat, phenophaseStatus)%>%
summarise(countYes=n_distinct(individualID))
## `summarise()` regrouping output by 'dateStat' (override with `.groups` argument)
inStat <- full_join(sampSize, inStat, by="dateStat")
# Retain only Yes
inStat_T <- filter(inStat, phenophaseStatus %in% "yes")
# check that it worked
unique(inStat_T$phenophaseStatus)
# plot number of individuals in leaf
phenoPlot <- ggplot(inStat_T, aes(dateStat, countYes)) +
geom_bar(stat="identity", na.rm = TRUE)
phenoPlot
# Now let's make the plot look a bit more presentable
phenoPlot <- ggplot(inStat_T, aes(dateStat, countYes)) +
geom_bar(stat="identity", na.rm = TRUE) +
ggtitle("Total Individuals in Leaf") +
xlab("Date") + ylab("Number of Individuals") +
theme(plot.title = element_text(lineheight=.8, face="bold", size = 20)) +
theme(text = element_text(size=18))
phenoPlot
# convert to percent
inStat_T$percent<- ((inStat_T$countYes)/inStat_T$numInd)*100
# plot percent of leaves
phenoPlot_P <- ggplot(inStat_T, aes(dateStat, percent)) +
geom_bar(stat="identity", na.rm = TRUE) +
ggtitle("Proportion in Leaf") +
xlab("Date") + ylab("% of Individuals") +
theme(plot.title = element_text(lineheight=.8, face="bold", size = 20)) +
theme(text = element_text(size=18))
phenoPlot_P
# use filter to select only the date of interest
phe_1sp_2018 <- filter(inStat_T, dateStat >= "2018-01-01" & dateStat <= "2018-12-31")
# did it work?
range(phe_1sp_2018$dateStat)
# Now let's make the plot look a bit more presentable
phenoPlot18 <- ggplot(phe_1sp_2018, aes(dateStat, countYes)) +
geom_bar(stat="identity", na.rm = TRUE) +
ggtitle("Total Individuals in Leaf") +
xlab("Date") + ylab("Number of Individuals") +
theme(plot.title = element_text(lineheight=.8, face="bold", size = 20)) +
theme(text = element_text(size=18))
phenoPlot18
# Write .csv
# This will write to your current working directory, change as desired.
write.csv( phe_1sp_2018 , file="NEONpheno_LITU_Leaves_SCBI_2018.csv", row.names=F)
knitr::opts_chunk$set(echo = TRUE)
# download data of interest - Single Aspirated Air Temperature
saat<-loadByProduct(dpID="DP1.00002.001", site="SCBI",
startdate="2018-01", enddate="2018-12",
package="basic",
avg = "30",
check.size = F)
# View the list
View(saat)
# Option 2 if using the pre-downloaded data from Canvas, you need to read in the variables file
# or open and look at it on your desktop
#var <- read.csv('NEON-pheno-temp-timeseries_v2/filesToStack00002/stackedFiles/variables_00002.csv')
#View(var)
# if using the pre-downloaded data from Canvas - you can skip this part.
# assign individual dataFrames in the list as an object
SAAT_30min <- saat$SAAT_30min
# unlist all objects
list2env(saat, .GlobalEnv)
knitr::opts_chunk$set(echo = TRUE)
# if using the pre-downloaded data from Canvas - you can skip this part.
# assign individual dataFrames in the list as an object
SAAT_30min <- saat$SAAT_30min
# unlist all objects
list2env(saat, .GlobalEnv)
knitr::opts_chunk$set(echo = FALSE)
# if using the pre-downloaded data from Canvas - you can skip this part.
# assign individual dataFrames in the list as an object
SAAT_30min <- saat$SAAT_30min
# unlist all objects
list2env(saat, .GlobalEnv)
# if using the pre-downloaded data from Canvas - you can skip this part.
# assign individual dataFrames in the list as an object
SAAT_30min <- saat$SAAT_30min
# unlist all objects
list2env(saat, .GlobalEnv)
# what is in the data?
str(SAAT_30min)
# create new dataframe without NAs
SAAT_30min_noNA <- SAAT_30min %>%
drop_na(tempSingleMean)  # tidyr function
library(tidyr)  # for data munging
# what is in the data?
str(SAAT_30min)
SAAT_30min_noNA <- SAAT_30min %>%
drop_na(tempSingleMean)
# create new dataframe without NAs
SAAT_30min_noNA <- SAAT_30min %>%
drop_na(tempSingleMean)  # tidyr function
# did it work?
sum(is.na(SAAT_30min_noNA$tempSingleMean))
# plot temp data
tempPlot <- ggplot(SAAT_30min, aes(startDateTime, tempSingleMean)) +
geom_point() +
ggtitle("Single Aspirated Air Temperature") +
xlab("Date") + ylab("Temp (C)") +
theme(plot.title = element_text(lineheight=.8, face="bold", size = 20)) +
theme(text = element_text(size=18))
tempPlot
# plot temp data
tempPlot <- ggplot(SAAT_30min, aes(startDateTime, tempSingleMean)) +
geom_point() +
ggtitle("Single Aspirated Air Temperature") +
xlab("Date") + ylab("Temp (C)") +
theme(plot.title = element_text(lineheight=.8, face="bold", size = 20)) +
theme(text = element_text(size=18))
tempPlot
# subset and add C to name for "clean"
SAAT_30minC <- filter(SAAT_30min_noNA, SAAT_30min_noNA$finalQF==0)
# Do any quality flags remain? Count 'em up
sum(SAAT_30minC$finalQF==1)
# plot temp data
tempPlot <- ggplot(SAAT_30minC, aes(startDateTime, tempSingleMean)) +
geom_point() +
ggtitle("Single Aspirated Air Temperature") +
xlab("Date") + ylab("Temp (C)") +
theme(plot.title = element_text(lineheight=.8, face="bold", size = 20)) +
theme(text = element_text(size=18))
tempPlot
# plot temp data
tempPlot <- ggplot(SAAT_30minC, aes(startDateTime, tempSingleMean)) +
geom_point() +
ggtitle("Single Aspirated Air Temperature") +
xlab("Date") + ylab("Temp (C)") +
theme(plot.title = element_text(lineheight=.8, face="bold", size = 20)) +
theme(text = element_text(size=18))
tempPlot
# convert to date, easier to work with
SAAT_30minC$Date <- as.Date(SAAT_30minC$startDateTime)
# did it work
str(SAAT_30minC$Date)
# max of mean temp each day
temp_day <- SAAT_30minC %>%
group_by(Date) %>%
distinct(Date, .keep_all=T) %>%
mutate(dayMax=max(tempSingleMean))
# plot Air Temperature Data across 2018 using daily data
tempPlot_dayMax <- ggplot(temp_day, aes(Date, dayMax)) +
geom_point() +
ggtitle("Daily Max Air Temperature") +
xlab("") + ylab("Temp (C)") +
theme(plot.title = element_text(lineheight=.8, face="bold", size = 20)) +
theme(text = element_text(size=18))
tempPlot_dayMax
# Define Start and end times for the subset as R objects that are the time class
startTime <- as.Date("2018-01-01")
endTime <- as.Date("2018-03-31")
# create a start and end time R object
start.end <- c(startTime,endTime)
str(start.end)
# Define Start and end times for the subset as R objects that are the time class
startTime <- as.Date("2018-01-01")
endTime <- as.Date("2018-03-31")
# create a start and end time R object
start.end <- c(startTime,endTime)
str(start.end)
# View data for first 3 months only
# And we'll add some color for a change.
tempPlot_dayMax3m <- ggplot(temp_day, aes(Date, dayMax)) +
geom_point(color="blue", size=1) +  # defines what points look like
ggtitle("Air Temperature\n Jan - March") +
xlab("Date") + ylab("Air Temperature (C)")+
(scale_x_date(limits=start.end,
date_breaks="1 week",
date_labels="%b %d"))
tempPlot_dayMax3m
